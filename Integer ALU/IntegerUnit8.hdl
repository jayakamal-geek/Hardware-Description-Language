// Integer unit chip

CHIP IntegerUnit8 {
	IN x[8], y[8], signed, op[3];
	OUT z[8], of, eq;
	
	PARTS:
	//AND generator
	And8(x=x, y=y, z[0..7]=and8);
	//OR generator
	Or8(x=x, y=y, z[0..7]=or8);
	//XOR genrator
	Xor8(x=x, y=y, z[0..7]=xor8);
	//MUX based on 1st 2 bits of operator selection input to choose from above results (or zero)
	MUX8(s=op[0..1], x1=and8, x2=or8, x3=xor8, x0[0..7]=false, z[0..7]=z0);
	
	//8 bit Addition
	AddSub8(A=x, B=y, control=false, signed=signed, result[0..7]=add8, OF=ofadd);
	//8 bit subtraction
	AddSub8(A=x, B=y, control=true, signed=signed, result[0..7]=sub8, OF=ofsub);
	//Unsigned 8 bit multiplication
	Mult8x8usign(a=x, b=y, prod[0..7]=umul8, OF=ofumul);
	//Signed 8 bit multplication
	Mult8x8sign(a=x, b=y, prod[0..7]=imul8, OF=ofimul);
	//MUX based on 1st 2 bits of operator selection input to choose from above results
	MUX8(s=op[0..1], x1=sub8, x2=umul8, x3=imul8, x0=add8, z[0..7]=z1);
	
	////MUX based on 1st 2 bits of operator selection input to choose relevant overflow bit
	MUXof(of0=ofadd, of1=ofsub, of2=ofumul, of3=ofimul, op=op, of=of);
	
	//MUX based on 3rd digit of operator selector to choose between results of first two MUX chips
	Mux2to1(s=op[2], x0=z0, x1=z1, z=z);

	//Checking for equalty of inputs
	Eq(x=x, y=y, eq=eq);
}
